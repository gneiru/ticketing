import {
  Badge,
  Button,
  ButtonGroup,
  Card,
  CardBody,
  CardFooter,
  Divider,
  Heading,
  Stack,
  Text,
} from "@chakra-ui/react";
import { type NextPage } from "next";
import Head from "next/head";
import { CreateTicket } from "~/components/form/TicketForm";
import { LoadingSpinner } from "~/components/loading";
import { AssignModal, DeleteModal } from "~/components/modal";
import { Nav } from "~/components/nav";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const { data, isLoading } = api.ticket.tickets.useQuery();
  console.log(data);
  if (isLoading) return <LoadingSpinner />;
  if (!data) return <>404</>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Nav />

        <div className="container mx-auto p-4">
          <div className="grid grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3">
            <div className="hidden md:block lg:block">
              <Text fontSize="3xl" as={"b"}>
                Create Ticket
              </Text>
              <CreateTicket className="p-4 shadow-lg" />
            </div>
            <div className="flex flex-col gap-4 ">
              <div className="block md:hidden lg:hidden">
                <Text fontSize="3xl" as={"b"}>
                  Create Ticket
                </Text>
                <CreateTicket className="p-4 shadow-lg" />
              </div>
              <Text fontSize="3xl" as={"b"}>
                My Tickets
              </Text>

              {data.map((ticket) => {
                return (
                  <Card maxW="sm" shadow="lg" key={ticket.id}>
                    <CardBody>
                      <Stack mt="6" spacing="3">
                        <Heading size="md">{ticket.subject}</Heading>
                        <Text fontSize={"sm"} noOfLines={4}>
                          {ticket.description}
                        </Text>
                        <Text color="blue.600" fontSize="2xl">
                          $450
                        </Text>
                        <Stack direction="row">
                          <Badge
                            colorScheme={
                              ticket.status == "TBA"
                                ? "purple"
                                : ticket.status == "IN_PROGRESS"
                                ? "orange"
                                : ticket.status == "OPEN"
                                ? "cyan"
                                : "red"
                            }
                          >
                            {ticket.status}
                          </Badge>
                        </Stack>
                      </Stack>
                    </CardBody>
                    <Divider />
                    <CardFooter>
                      <ButtonGroup spacing="2">
                        {!ticket.closedAt && (
                          <Button variant="solid" colorScheme="teal">
                            Close
                          </Button>
                        )}

                        {!ticket.assignedTo && (
                          <AssignModal ticketId={ticket.id} />
                        )}
                        {!ticket.closedAt && (
                          <DeleteModal ticketId={ticket.id}/>
                        )}
                      </ButtonGroup>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
            <div>
              <Text fontSize="3xl" as={"b"}>
                My Tasks
              </Text>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
