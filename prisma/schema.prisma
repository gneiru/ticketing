// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ticket {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    closedAt    DateTime?
    target      DateTime?
    subject     String
    description String    @db.LongText
    category    Category
    status      Status    @default(TBA)
    assignedTo  String?
    assignee    User?     @relation(fields: [assignedTo], references: [id], name: "assign")
    requestorId String
    requestor   User      @relation(fields: [requestorId], references: [id], name: "request")

    @@index([assignedTo])
    @@index([requestorId])
}

enum Status {
    TBA
    OPEN
    IN_PROGRESS
    DONE
    CLOSED
}

enum Category {
    TECHNICAL_SUPPORT
    PMS
    THIRD_PARTY
    CIS_SYSTEM_UPDATE
    CTRACK_CONCERNS
    OTHER_IT_CONCERNS
    SYSTEM_ERROR
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    requests      Ticket[]  @relation(name: "request")
    tasks         Ticket[]  @relation(name: "assign")
    FAQ           FAQ[]
}

enum Role {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model FAQ {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    question  String
    answer    String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
